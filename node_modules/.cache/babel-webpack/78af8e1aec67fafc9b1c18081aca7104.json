{"ast":null,"code":"import { User } from '../user';\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SearchService = /*#__PURE__*/(() => {\n  class SearchService {\n    constructor(http) {\n      this.http = http;\n      this.formRepo = '';\n      this.userName = '';\n      this.user = new User(\"\", \"\", 0, 0, 0, \"\");\n    }\n\n    userRequest(userName) {\n      this.userName = userName;\n      console.log(this.userName);\n      let promise = new Promise((resolve, reject) => {\n        this.http.get('https://api.github.com/users/' + this.userName).toPromise().then(response => {\n          this.user.photo = response.avatar_url;\n          this.user.userName = response.name;\n          this.user.bio = response.bio;\n          this.user.followers = response.followers;\n          this.user.following = response.following;\n          this.user.repos = response.public_repos;\n          resolve(response);\n        }, error => {\n          this.user.photo = \"Avatar not found\";\n          this.user.userName = \"Username not found\";\n          reject(error);\n        });\n      });\n      return promise;\n    }\n\n    userRepoRequest(result) {\n      return this.http.get('https://api.github.com/users/' + result + '/repos');\n    }\n\n    repoRequest(request) {\n      this.formRepo = request;\n      return this.http.get(environment.repoApi + this.formRepo + '*');\n    }\n\n  }\n\n  SearchService.ɵfac = function SearchService_Factory(t) {\n    return new (t || SearchService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SearchService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SearchService,\n    factory: SearchService.ɵfac,\n    providedIn: 'root'\n  });\n  return SearchService;\n})();","map":null,"metadata":{},"sourceType":"module"}